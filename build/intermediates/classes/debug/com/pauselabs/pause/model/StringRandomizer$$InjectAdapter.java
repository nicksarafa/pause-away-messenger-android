// Code generated by dagger-compiler.  Do not edit.
package com.pauselabs.pause.model;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binder<StringRandomizer>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code StringRandomizer} and its
 * dependencies.
 * 
 * Being a {@code Provider<StringRandomizer>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<StringRandomizer>} and handling injection
 * of annotated fields.
 */
public final class StringRandomizer$$InjectAdapter extends Binding<StringRandomizer>
    implements MembersInjector<StringRandomizer> {
  private Binding<android.content.SharedPreferences> prefs;

  public StringRandomizer$$InjectAdapter() {
    super(null, "members/com.pauselabs.pause.model.StringRandomizer", NOT_SINGLETON, StringRandomizer.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    prefs = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", StringRandomizer.class);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(prefs);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<StringRandomizer>}.
   */
  @Override
  public void injectMembers(StringRandomizer object) {
    object.prefs = prefs.get();
  }
}
