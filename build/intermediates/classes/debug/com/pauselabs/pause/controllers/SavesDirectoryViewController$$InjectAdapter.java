// Code generated by dagger-compiler.  Do not edit.
package com.pauselabs.pause.controllers;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<SavesDirectoryViewController>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code SavesDirectoryViewController} and its
 * dependencies.
 * 
 * Being a {@code Provider<SavesDirectoryViewController>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<SavesDirectoryViewController>} and handling injection
 * of annotated fields.
 */
public final class SavesDirectoryViewController$$InjectAdapter extends Binding<SavesDirectoryViewController>
    implements Provider<SavesDirectoryViewController>, MembersInjector<SavesDirectoryViewController> {
  private Binding<android.content.SharedPreferences> prefs;
  private Binding<android.view.LayoutInflater> inflater;

  public SavesDirectoryViewController$$InjectAdapter() {
    super("com.pauselabs.pause.controllers.SavesDirectoryViewController", "members/com.pauselabs.pause.controllers.SavesDirectoryViewController", NOT_SINGLETON, SavesDirectoryViewController.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    prefs = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", SavesDirectoryViewController.class);
    inflater = (Binding<android.view.LayoutInflater>) linker.requestBinding("android.view.LayoutInflater", SavesDirectoryViewController.class);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(prefs);
    injectMembersBindings.add(inflater);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<SavesDirectoryViewController>}.
   */
  @Override
  public SavesDirectoryViewController get() {
    SavesDirectoryViewController result = new SavesDirectoryViewController();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<SavesDirectoryViewController>}.
   */
  @Override
  public void injectMembers(SavesDirectoryViewController object) {
    object.prefs = prefs.get();
    object.inflater = inflater.get();
  }
}
